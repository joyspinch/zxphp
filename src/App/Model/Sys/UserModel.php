<?php

namespace Model;
// hook model_user_use.php
use App\Model;

class UserModel extends Model
{
	// hook model_user_public_start.php
	public $table = 'zx_user';
	public $index = 'uid';
	public $is_delete = 'is_delete';
	// hook model_user_public_end.php


	// hook model_user_start.php
	public function Glist($cond = [], $order = [], $page = 0, $limit = 0, $safe = 1)
	{
		$uids = parent::select($cond, $order, $this->index, $page, $limit);
		$list = [];
		foreach ($uids as $uid) {
			$user = $this->read_by_uid($uid[$this->index]);
			isset($user[$this->index]) AND $list[] = $safe == 1 ? $this->user_safe_info($user) : $user;
		}
		return $list;
	}

	public function read_by_uid($uid, $reload = 0)
	{
		// hook model_user_read_by_uid_start.php
		$user = $this->CacheGet('user_' . $uid);
		if (empty($user[$this->index]) || $reload) {
			$user = $this->read([$this->index => $uid]);
			// hook model_user_read_by_uid_cache_before.php
			if (!empty($user[$this->index])) {
				$user=$this->user_format($user);
				$this->CacheSet('user_' . $uid, $user);
			} else {
				$this->CacheDel('user_' . $uid);
			}
			// hook model_user_read_by_uid_cache_after.php
		}
		// hook model_user_read_by_uid_end.php
		return $user;
	}

	public function read_by_username($username)
	{
		// hook model_user_read_by_username_start.php
		$user = $this->read(['username' => $username], $this->index);
		if (!empty($user[$this->index])) {
			$user = $this->read_by_uid($user[$this->index]);
		} else {
			$user = [];
		}
		// hook model_user_read_by_username_end.php
		return $user;
	}

	public function update($cond, $data)
	{
		// hook model_user_update_start.php
		$r = parent::update($cond, $data); // TODO: Change the autogenerated stub
		$list = $this->select($cond, [], $this->index);
		foreach ($list as $v) {
			$this->read_by_uid($v[$this->index], 1);
		}
		// hook model_user_update_end.php
	}

	public function delete($cond)
	{
		// hook model_user_delete_start.php
		$r = parent::delete($cond); // TODO: Change the autogenerated stub
		$list = $this->select($cond, [], $this->index);
		foreach ($list as $v) {
			$this->read_by_uid($v[$this->index], 1);
		}
		// hook model_user_delete_end.php
	}

	public function select_fmt($cond = [], $order = [], $select = '*', $page = 0, $limit = 0, $key = '', $group = '')
	{
		$list = parent::select($cond, $order, $select, $page, $limit, $key, $group); // TODO: Change the autogenerated stub

		if($list){
			foreach ($list as &$v) {
				// hook model_user_select_fmt_foreach_inside.php
				$v=$this->user_format($v);
			}
		}

		return $list;
	}

	public function GetListFmt($where, $order = [], $page = 1, $limit = 10, $select = '*', $ispage = 1, $group = '')
	{
		// hook model_user_GetListFmt_start.php
		$list = $this->GetList($where, $order, $page, $limit, $select, $ispage, $group);
		// hook model_user_GetListFmt_foreach.php
		if($list['results']){
			foreach ($list['results'] as &$v) {
				// hook model_user_GetListFmt_foreach_inside.php
				$v=$this->user_format($v);

			}

		}
		// hook model_user_GetListFmt_end.php
		return $list;
	}

	public function user_format($user)
	{
		static $uploadUrl;
		empty($uploadUrl) && $uploadUrl = rtrim(str_replace(['http://', 'https://'], '', _CONF('upload_domain', '')),'/');
		// hook model_user_format_start.php
		isset($user['create_ip']) && $user['create_ip_fmt'] = long2ip(intval($user['create_ip']));
		isset($user['create_at']) && $user['create_at_fmt'] = empty($user['create_at']) ? '0000-00-00' : date('Y-m-d', $user['create_at']);
		isset($user['login_ip']) && $user['login_ip_fmt'] = long2ip(intval($user['login_ip']));
		isset($user['login_at']) && $user['login_at_fmt'] = empty($user['login_at']) ? '0000-00-00' : date('Y-m-d', $user['login_at']);
		isset($user['gid']) && $user['role_name'] = $this->Role->role_kv[$user['gid']];
		isset($user['avatar']) && $user['avatar_fmt'] = $user['avatar'] ?  \Upload::get_filename_by_id('avatar', $user['uid'],'png'):["src"=>"/images/avatar/default.png","uploadUrl"=>$uploadUrl."/images/avatar/default.png"];

		// hook model_user_format_end.php
		return $user;
	}

	public function user_safe_info($user)
	{

		// hook model_user_user_safe_info_start.php

		unset($user['password']);
		unset($user['email']);
		unset($user['salt']);
		unset($user['realname']);
		unset($user['qq']);
		unset($user['mobile']);
		unset($user['create_ip']);
		unset($user['create_ip_fmt']);
		unset($user['create_at']);
		unset($user['create_at_fmt']);
		unset($user['login_ip']);
		unset($user['login_at']);
		unset($user['login_ip_fmt']);
		unset($user['login_at_fmt']);
		unset($user['logins']);

		// hook model_user_user_safe_info_end.php

		return $user;
	}


	public function make_token(\Request $request, $user)
	{
		return xn_encrypt($request->_S('REQUEST_TIME') . "\t" . md5($request->_S('USER-AGENT')) . "\t" . xn_encrypt($user[$this->index], 'a') . "\t" . substr($user['password'], 0, 16) . "\t" . $request->get_client_ip(1));
	}

	public function check_token($request, $token)
	{
		$_token = xn_decrypt($token);
		$arr = explode("\t", $_token);
		$user = [];
		//$user['REQUEST_TIME']=$arr[0];
		//$user['IP']=$arr[4];
		$uid = xn_decrypt($arr[2], 'a');
		if (empty($uid) || !is_numeric($uid) || md5($request->server['USER-AGENT']) != $arr[1]) {
			return false;
		}
		$login_user = $this->read_by_uid($uid);
		return trim($arr[3]) != trim(substr($login_user['password'], 0, 16)) ? false : $login_user;
	}

	// hook model_user_end.php
}

?>